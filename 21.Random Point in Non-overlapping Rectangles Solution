

public class Solution {
    private final List<int[]> rects;
    private final double[] probabilities;
    private final int totalArea;
    private final Random random;

    public Solution(int[][] rects) {
        this.rects = new ArrayList<>();
        this.probabilities = new double[rects.length];
        this.totalArea = calculateTotalArea(rects);

        for (int[] rect : rects) {
            int area = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);
            probabilities[rects.indexOf(rect)] = (double) area / totalArea;
            this.rects.add(rect);
        }

        random = new Random();
    }

    public int[] pick() {
        int index = pickIndex();
        int[] rect = rects.get(index);

        int x = random.nextInt(rect[2] - rect[0] + 1) + rect[0];
        int y = random.nextInt(rect[3] - rect[1] + 1) + rect[1];

        return new int[]{x, y};
    }

    private int calculateTotalArea(int[][] rects) {
        int totalArea = 0;
        for (int[] rect : rects) {
            totalArea += (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);
        }
        return totalArea;
    }

    private int pickIndex() {
        double rand = random.nextDouble();
        double prefixSum = 0.0;

        for (int i = 0; i < probabilities.length; i++) {
            prefixSum += probabilities[i];
            if (rand < prefixSum) {
                return i;
            }
        }

        // It should not reach here.
        return -1;
    }
}
