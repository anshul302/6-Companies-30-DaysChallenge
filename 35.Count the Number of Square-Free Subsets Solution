

class Solution {
    private final int[] primelist = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};

    private int checkPrime(int n) {
        int ret = 0;
        for (int i = 0; i < 10; i++) {
            if (n % primelist[i] == 0) {
                n /= primelist[i];
                ret |= 1 << i;
            }
            if (n % primelist[i] == 0) {
                return -1;
            }
        }
        return ret;
    }

    public int squareFreeSubsets(int[] nums) {
        final int MOD = 1_000_000_007;
        int cnt = 0;
        int[] bitmap = new int[nums.length];

        for (int i = 0; i < nums.length; i++) {
            int ret = checkPrime(nums[i]);
            if (ret != -1) {
                bitmap[cnt++] = ret;
            }
        }

        int[] m = new int[1024];
        int ans = 0;

        while (cnt > 0) {
            cnt--;
            for (int k = 0; k < 1024; k++) {
                if (m[k] != 0 && (k & bitmap[cnt]) == 0) {
                    m[(k | bitmap[cnt])] = (m[(k | bitmap[cnt])] + m[k]) % MOD;
                }
            }
            m[bitmap[cnt]]++;
        }

        for (int i = 0; i < 1024; i++) {
            ans = (ans + m[i]) % MOD;
        }

        return ans;
    }
}
