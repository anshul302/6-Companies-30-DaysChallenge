

public class Solution {
    private void getCombinations(int idx, int k, int target, List<List<Integer>> combinations, List<Integer> comb) {
        if (target == 0 && comb.size() == k) {
            combinations.add(new ArrayList<>(comb));
            return;
        }

        if (comb.size() < k) {
            for (int i = idx; i <= 9; i++) {
                if (target - i < 0) break;
                comb.add(i);
                getCombinations(i + 1, k, target - i, combinations, comb);
                comb.remove(comb.size() - 1);
            }
        }
    }

    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> combinations = new ArrayList<>();
        List<Integer> comb = new ArrayList<>();

        getCombinations(1, k, n, combinations, comb);

        return combinations;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int k = 3;
        int n = 7;
        List<List<Integer>> result = solution.combinationSum3(k, n);
        System.out.println(result);
    }
}
